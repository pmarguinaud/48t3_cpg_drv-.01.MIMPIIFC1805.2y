#:set config_file = os.path.dirname(_THIS_FILE_) + '/../module/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL']
SUBROUTINE CPG_PT_ULP_EXPL (YDMODEL, YDGEOMETRY, YDCPG_SL1, YDVARS, YDCPG_BNDS, LDGET, PGFLPT)

! -----------------------------------------------------------------------------
!     --------------------------------------------
!**** *CPG_PT_ULP_EXPL*  physics tendencies written to or extracted from GFLPT
!     --------------------------------------------

!     Purpose.
!     --------
!       Copy the physics tendencies calculated (for ex in predictor)
!       to GFLPT to be retrieved and used during corrector
!       Designed for unlagged physics packages (LAGPHY=F).
!       May be used for non advected GFL too.

!       This routine is called for lpc_full=true only.

!**   Interface.
!     ----------
!        CALL CPG_PT_ULP_EXPL(...)

!     Input arguments
!     ------------------
!       YDCPG_BNDS%KIDIA  : start of horizontal loop
!       YDCPG_BNDS%KFDIA   : end of horizontal loop
!       LDGET   : T = get tendencies from buffers.
!                 F = save tendencies in buffers.
!       KFLDN,KFLDX: for second dimension of PTENDEXT.

!     Input or Output according to LDGET
!     ----------------------------------
!       PTEND[X]: tendency of X variable from phy (advected variables).
!       PGFLPT  : buffer for tendency of GFL variable from phy.
!       PGFLT1  : tendency of X variable from phy (not advected variables).
!       PGFL    : GFL variables.
!       PGMV    : upper air GMV variables at time t.
!       PGMVS   : surface GMV variables at time t.

!     Implicit arguments
!     --------------------

!     Author.
!     -------
!      Martina Tudor + Karim Yessad
!      Original : Jan 2011 (from CPG_PT)

!     Modifications.
!     --------------
! -----------------------------------------------------------------------------

USE GEOMETRY_MOD , ONLY : GEOMETRY
USE PARKIND1     , ONLY : JPIM, JPRB
USE YOMHOOK      , ONLY : LHOOK, DR_HOOK
USE YOMCT0       , ONLY : LNHDYN
USE CPG_OPTS_TYPE_MOD       , ONLY : CPG_BNDS_TYPE
USE FIELD_VARIABLES_MOD     , ONLY : FIELD_VARIABLES
USE CPG_TYPE_MOD            , ONLY : CPG_SL1_TYPE
USE TYPE_MODEL              , ONLY : MODEL
USE MF_PHYS_NEXT_STATE_TYPE_MOD &
                            , ONLY : MF_PHYS_NEXT_STATE_TYPE


! -----------------------------------------------------------------------------

IMPLICIT NONE

TYPE(MODEL)             ,INTENT(IN)     :: YDMODEL
TYPE(GEOMETRY)          ,INTENT(IN)     :: YDGEOMETRY
TYPE(CPG_SL1_TYPE)      ,INTENT(INOUT)  :: YDCPG_SL1
TYPE(FIELD_VARIABLES)   ,INTENT(INOUT)  :: YDVARS
TYPE(CPG_BNDS_TYPE)     ,INTENT(IN)     :: YDCPG_BNDS
LOGICAL                 ,INTENT(IN)     :: LDGET
REAL(KIND=JPRB)         ,INTENT(INOUT)  :: PGFLPT(YDGEOMETRY%YRDIM%NPROMA,YDGEOMETRY%YRDIMV%NFLEVG,YDMODEL%YRML_GCONF%YGFL%NDIMPT)
! -----------------------------------------------------------------------------

INTEGER(KIND=JPIM) :: JGFL
TYPE (MF_PHYS_NEXT_STATE_TYPE) :: YLMF_PHYS_NEXT_STATE

REAL(KIND=JPRB) :: ZHOOK_HANDLE

! -----------------------------------------------------------------------------

IF (LHOOK) CALL DR_HOOK('CPG_PT_ULP_EXPL',0,ZHOOK_HANDLE)
ASSOCIATE(YDDIM=>YDGEOMETRY%YRDIM,YDDIMV=>YDGEOMETRY%YRDIMV,YGFL=>YDMODEL%YRML_GCONF%YGFL)
ASSOCIATE(YCPF=>YDMODEL%YRML_GCONF%YGFL%YCPF,   NFLEVG=>YDDIMV%NFLEVG)

CALL YLMF_PHYS_NEXT_STATE%INIT (YDCPG_SL1, YDGEOMETRY, YDVARS, YDMODEL)

! -----------------------------------------------------------------------------

!*       1.  PREDICTOR FOR LPC_FULL.
!        ---------------------------

IF (.NOT.LDGET) THEN

  ! * GMV:
  YDVARS%CUPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YLMF_PHYS_NEXT_STATE%U%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  YDVARS%CVPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YLMF_PHYS_NEXT_STATE%V%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  YDVARS%CTPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YLMF_PHYS_NEXT_STATE%T%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  IF (LNHDYN) THEN
    YDVARS%CSVDPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YLMF_PHYS_NEXT_STATE%SVD%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  ENDIF

  ! * GMVS:
  YDVARS%CSPPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA)=YDCPG_SL1%SP9%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA)

  ! * GFL:
#:for v in gfl.variables
#:if v.array == 1
  DO JGFL = 1, SIZE (YDCPG_SL1%${v.name}$)
    IF (YGFL%Y${v.name}$(JGFL)%LT1 .AND. YGFL%Y${v.name}$(JGFL)%LPT) THEN
      PGFLPT(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG,YGFL%Y${v.name}$(JGFL)%MPPT) = YLMF_PHYS_NEXT_STATE%${v.name}$(JGFL)%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
    ENDIF
  ENDDO

#:else
  IF (YGFL%Y${v.name}$%LT1 .AND. YGFL%Y${v.name}$%LPT) THEN
    PGFLPT(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG,YGFL%Y${v.name}$%MPPT) = YLMF_PHYS_NEXT_STATE%${v.name}$%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  ENDIF

#:endif
#:endfor

ENDIF

! -----------------------------------------------------------------------------

!*       2.  CORRECTOR FOR LPC_FULL.
!        ---------------------------

IF (LDGET) THEN

  ! * GMV:
  YLMF_PHYS_NEXT_STATE%U%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YDVARS%CUPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  YLMF_PHYS_NEXT_STATE%V%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YDVARS%CVPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  YLMF_PHYS_NEXT_STATE%T%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YDVARS%CTPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  IF (LNHDYN) THEN
    YLMF_PHYS_NEXT_STATE%SVD%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YDVARS%CSVDPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  ENDIF

  ! * GMVS:
  YDCPG_SL1%SP9%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA)=YDVARS%CSPPT%T9(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA)

  ! * GFL:
#:for v in gfl.variables
#:if v.array == 1
  DO JGFL = 1, SIZE (YDCPG_SL1%${v.name}$)
    IF (YGFL%Y${v.name}$(JGFL)%LT1 .AND. YGFL%Y${v.name}$(JGFL)%LPT) THEN
      YLMF_PHYS_NEXT_STATE%${v.name}$(JGFL)%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG) = PGFLPT(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG,YGFL%Y${v.name}$(JGFL)%MPPT)
    ENDIF
  ENDDO

#:else
  IF (YGFL%Y${v.name}$%LT1 .AND. YGFL%Y${v.name}$%LPT) THEN
    YLMF_PHYS_NEXT_STATE%${v.name}$%P(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG) = PGFLPT(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG,YGFL%Y${v.name}$%MPPT)
  ENDIF

#:endif
#:endfor

  IF (YCPF%LACTIVE) THEN
    YDVARS%CPF%T1(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)=YDVARS%CPF%T0(YDCPG_BNDS%KIDIA:YDCPG_BNDS%KFDIA,1:NFLEVG)
  ENDIF

ENDIF

! -----------------------------------------------------------------------------

END ASSOCIATE
END ASSOCIATE

IF (LHOOK) CALL DR_HOOK('CPG_PT_ULP_EXPL',1,ZHOOK_HANDLE)

END SUBROUTINE CPG_PT_ULP_EXPL
