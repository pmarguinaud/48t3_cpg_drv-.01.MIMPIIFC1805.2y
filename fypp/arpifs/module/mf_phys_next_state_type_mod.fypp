#:mute
#:set config_file = os.path.dirname(_THIS_FILE_) + '/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL'] 

#:endmute
MODULE MF_PHYS_NEXT_STATE_TYPE_MOD

USE PARKIND1, ONLY : JPIM, JPRB
USE FIELD_MODULE
USE CPG_OPTS_TYPE_MOD, ONLY : CPG_DIMS_VARS_TYPE
IMPLICIT NONE

TYPE MF_PHYS_NEXT_STATE_2D_TYPE
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: P (:) => NULL ()
  TYPE (FIELD_2D), POINTER :: F_P => NULL ()
END TYPE MF_PHYS_NEXT_STATE_2D_TYPE

TYPE MF_PHYS_NEXT_STATE_3D_TYPE
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: P (:, :) => NULL ()
  TYPE (FIELD_3D), POINTER :: F_P => NULL ()
END TYPE MF_PHYS_NEXT_STATE_3D_TYPE

TYPE MF_PHYS_NEXT_STATE_TYPE

  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE) :: U
  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE) :: V
  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE) :: T
  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE) :: SVD
  TYPE (MF_PHYS_NEXT_STATE_2D_TYPE) :: SP

#:for v in gfl.variables
  #:if v.array
  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE), ALLOCATABLE :: ${v.name}$ (:)
  #:elif v.dim == 3
  TYPE (MF_PHYS_NEXT_STATE_3D_TYPE) :: ${v.name}$
  #:endif
#:endfor


  TYPE (CPG_DIMS_VARS_TYPE) :: DIMS

CONTAINS

  PROCEDURE :: INIT => MF_PHYS_NEXT_STATE_TYPE_INIT
  PROCEDURE :: UPDATE_VIEW => MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW

END TYPE MF_PHYS_NEXT_STATE_TYPE

CONTAINS

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT (SELF, YDCPG_SL1, YDGEOMETRY, YDVARS, YDMODEL)

USE GEOMETRY_MOD, ONLY : GEOMETRY
USE YOMCT0, ONLY : LSLAG, LTWOTL
USE FIELD_VARIABLES_MOD, ONLY: FIELD_VARIABLES
USE CPG_TYPE_MOD, ONLY : CPG_SL1_TYPE
USE TYPE_MODEL  , ONLY : MODEL

CLASS (MF_PHYS_NEXT_STATE_TYPE)     :: SELF
TYPE (CPG_SL1_TYPE),    INTENT (IN) :: YDCPG_SL1
TYPE(GEOMETRY),         INTENT (IN) :: YDGEOMETRY
TYPE (FIELD_VARIABLES), INTENT (IN) :: YDVARS
TYPE(MODEL),            INTENT (IN) :: YDMODEL

INTEGER (KIND=JPIM) :: JGFL

ASSOCIATE (YDDYN => YDMODEL%YRML_DYN%YRDYN)

CALL SELF%DIMS%INIT (YDGEOMETRY, YDMODEL, YDVARS)

IF (LSLAG) THEN

  ! Taken from cp_ptrslb1.F90
  
  IF (YDDYN%NWLAG == 4) THEN
    SELF%U%P   => YDCPG_SL1%U0%P 
    SELF%U%F_P => YDCPG_SL1%U0%F_P
    SELF%V%P   => YDCPG_SL1%V0%P 
    SELF%V%F_P => YDCPG_SL1%V0%F_P
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%U%P   => YDCPG_SL1%UF9%P 
      SELF%U%F_P => YDCPG_SL1%UF9%F_P
      SELF%V%P   => YDCPG_SL1%VF9%P 
      SELF%V%F_P => YDCPG_SL1%VF9%F_P
    ELSE
      SELF%U%P   => YDCPG_SL1%U9%P 
      SELF%U%F_P => YDCPG_SL1%U9%F_P
      SELF%V%P   => YDCPG_SL1%V9%P 
      SELF%V%F_P => YDCPG_SL1%V9%F_P
    ENDIF
  ENDIF
  ! * temperature
  IF (YDDYN%NTLAG == 4) THEN
    SELF%T%P   => YDCPG_SL1%T0%P 
    SELF%T%F_P => YDCPG_SL1%T0%F_P
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%T%P   => YDCPG_SL1%TF9%P 
      SELF%T%F_P => YDCPG_SL1%TF9%F_P
    ELSE
      SELF%T%P   => YDCPG_SL1%T9%P 
      SELF%T%F_P => YDCPG_SL1%T9%F_P
    ENDIF
  ENDIF
  ! * vertical divergence
  IF (YDDYN%NSVDLAG == 4) THEN
    SELF%SVD%P   => YDCPG_SL1%VD0%P
    SELF%SVD%F_P => YDCPG_SL1%VD0%F_P
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%SVD%P   => YDCPG_SL1%VDF9%P
      SELF%SVD%F_P => YDCPG_SL1%VDF9%F_P
    ELSE
      SELF%SVD%P   => YDCPG_SL1%VD9%P
      SELF%SVD%F_P => YDCPG_SL1%VD9%F_P
    ENDIF
  ENDIF

  SELF%SP%P   => YDCPG_SL1%SP9%P
  SELF%SP%F_P => YDCPG_SL1%SP9%F_P

  ! * GFL arrays
  IF (YDDYN%LSPLTHOIGFL.OR.(YDDYN%NSPLTHOI /= 0)) THEN
#:for v in gfl.variables
  #:if v.array
    ALLOCATE (SELF%${v.name}$ (SIZE (YDVARS%${v.name}$)))
    DO JGFL = 1, SIZE (YDVARS%${v.name}$)
      CALL MF_PHYS_NEXT_STATE_TYPE_INIT_SPLTHOI_3D (YDVARS%${v.name}$(JGFL), SELF%${v.name}$(JGFL), YDCPG_SL1%${v.name}$(JGFL))
    ENDDO
  #:elif v.dim == 3
    CALL MF_PHYS_NEXT_STATE_TYPE_INIT_SPLTHOI_3D (YDVARS%${v.name}$, SELF%${v.name}$, YDCPG_SL1%${v.name}$)
!   IF (YDVARS%${v.name}$%LADV) THEN
!     SELF%${v.name}$%P   => YDCPG_SL1%${v.name}$%P_F
!     SELF%${v.name}$%F_P => YDCPG_SL1%${v.name}$%F_P_F
!   ELSE
!     SELF%${v.name}$%P   => YDVARS%${v.name}$%T1
!     SELF%${v.name}$%F_P => YDVARS%${v.name}$%FT1
!   ENDIF
  #:endif
#:endfor
  ELSE
#:for v in gfl.variables
  #:if v.array
    ALLOCATE (SELF%${v.name}$ (SIZE (YDVARS%${v.name}$)))
    DO JGFL = 1, SIZE (YDVARS%${v.name}$)
      CALL MF_PHYS_NEXT_STATE_TYPE_INIT_3D (YDVARS%${v.name}$(JGFL), SELF%${v.name}$(JGFL), YDCPG_SL1%${v.name}$(JGFL))
    ENDDO
  #:elif v.dim == 3
    CALL MF_PHYS_NEXT_STATE_TYPE_INIT_3D (YDVARS%${v.name}$, SELF%${v.name}$, YDCPG_SL1%${v.name}$)
!   IF (YDVARS%${v.name}$%LADV) THEN
!     SELF%${v.name}$%P   => YDCPG_SL1%${v.name}$%P
!     SELF%${v.name}$%F_P => YDCPG_SL1%${v.name}$%F_P
!   ELSE
!     SELF%${v.name}$%P   => YDVARS%${v.name}$%T1
!     SELF%${v.name}$%F_P => YDVARS%${v.name}$%FT1
!   ENDIF
  #:endif
#:endfor
  ENDIF  

ELSE

  SELF%U%P     => YDVARS%U%T1
  SELF%U%F_P   => YDVARS%U%FT1
  SELF%V%P     => YDVARS%V%T1
  SELF%V%F_P   => YDVARS%V%FT1
  SELF%T%P     => YDVARS%T%T1
  SELF%T%F_P   => YDVARS%T%FT1
  SELF%SVD%P   => YDVARS%SVD%T1
  SELF%SVD%F_P => YDVARS%SVD%FT1
  SELF%SP%P    => YDVARS%SP%T1
  SELF%SP%F_P  => YDVARS%SP%FT1

#:for v in gfl.variables
  #:if v.array
  ALLOCATE (SELF%${v.name}$ (SIZE (YDVARS%${v.name}$)))
  DO JGFL = 1, SIZE (YDVARS%${v.name}$)
    CALL MF_PHYS_NEXT_STATE_TYPE_INIT_EUL_3D (YDVARS%${v.name}$(JGFL), SELF%${v.name}$(JGFL))
  ENDDO
  #:elif v.dim == 3
  CALL MF_PHYS_NEXT_STATE_TYPE_INIT_EUL_3D (YDVARS%${v.name}$, SELF%${v.name}$)
! SELF%${v.name}$%P   => YDVARS%${v.name}$%T1
! SELF%${v.name}$%F_P => YDVARS%${v.name}$%FT1
  #:endif
#:endfor

ENDIF

END ASSOCIATE

CONTAINS

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT_EUL_3D (YDV3D, YDN3D)

USE VARIABLE_MODULE, ONLY: VARIABLE_3D

TYPE (VARIABLE_3D),                INTENT (IN)    :: YDV3D
TYPE (MF_PHYS_NEXT_STATE_3D_TYPE), INTENT (INOUT) :: YDN3D

YDN3D%P   => YDV3D%T1
YDN3D%F_P => YDV3D%FT1

END SUBROUTINE 

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT_3D (YDV3D, YDN3D, YDF3D)

USE CPG_TYPE_MOD, ONLY : CPG_SL1_3D_TYPE
USE VARIABLE_MODULE, ONLY: VARIABLE_3D

TYPE (VARIABLE_3D),                INTENT (IN)    :: YDV3D
TYPE (MF_PHYS_NEXT_STATE_3D_TYPE), INTENT (INOUT) :: YDN3D
TYPE (CPG_SL1_3D_TYPE),            INTENT (IN)    :: YDF3D

IF (YDV3D%LADV) THEN
  YDN3D%P   => YDF3D%P
  YDN3D%F_P => YDF3D%F_P
ELSE
  YDN3D%P   => YDV3D%T1
  YDN3D%F_P => YDV3D%FT1
ENDIF

END SUBROUTINE 

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT_SPLTHOI_3D (YDV3D, YDN3D, YDF3D)

USE CPG_TYPE_MOD, ONLY : CPG_SL1_3D_TYPE
USE VARIABLE_MODULE, ONLY: VARIABLE_3D

TYPE (VARIABLE_3D),                INTENT (IN)    :: YDV3D
TYPE (MF_PHYS_NEXT_STATE_3D_TYPE), INTENT (INOUT) :: YDN3D
TYPE (CPG_SL1_3D_TYPE),            INTENT (IN)    :: YDF3D

IF (YDV3D%LADV) THEN
  YDN3D%P   => YDF3D%P_F
  YDN3D%F_P => YDF3D%F_P_F
ELSE
  YDN3D%P   => YDV3D%T1
  YDN3D%F_P => YDV3D%FT1
ENDIF

END SUBROUTINE

END SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)
CLASS (MF_PHYS_NEXT_STATE_TYPE)              :: SELF
INTEGER(KIND=JPIM), INTENT (IN)   :: BLOCK_INDEX

INTEGER (KIND=JPIM) :: JGFL

IF (ASSOCIATED (SELF%U%F_P)) THEN
  SELF%U%P => SELF%U%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%V%F_P)) THEN
  SELF%V%P => SELF%V%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%T%F_P)) THEN
  SELF%T%P => SELF%T%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%SVD%F_P)) THEN
  SELF%SVD%P => SELF%SVD%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%SP%F_P)) THEN
  SELF%SP%P => SELF%SP%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

#:for v in gfl.variables
  #:if v.array
DO JGFL = 1, SIZE (SELF%${v.name}$)
  IF (ASSOCIATED (SELF%${v.name}$(JGFL)%F_P)) THEN
    SELF%${v.name}$(JGFL)%P => SELF%${v.name}$(JGFL)%F_P%GET_VIEW (BLOCK_INDEX)
  ENDIF
ENDDO
  #:elif v.dim == 3
IF (ASSOCIATED (SELF%${v.name}$%F_P)) THEN
  SELF%${v.name}$%P => SELF%${v.name}$%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF
  #:endif
#:endfor

END SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW 

END MODULE MF_PHYS_NEXT_STATE_TYPE_MOD



